
x-version-common:
  &service-common
  image: docker.io/bitnami/postgresql-repmgr:14.9.0
  restart: always

x-common-env:
  &common-env
  REPMGR_PASSWORD: repmgr
  REPMGR_PARTNER_NODES: pg-0,pg-1:5432
  REPMGR_PORT_NUMBER: 5432
  REPMGR_PRIMARY_HOST: pg-0
  REPMGR_PRIMARY_PORT: 5432
  POSTGRESQL_POSTGRES_PASSWORD: postgres
  POSTGRESQL_USERNAME: docker
  POSTGRESQL_PASSWORD: docker
  POSTGRESQL_DATABASE: docker
  POSTGRESQL_SHARED_PRELOAD_LIBRARIES: pgaudit, pg_stat_statements
  POSTGRESQL_SYNCHRONOUS_COMMIT_MODE: remote_write
  POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS: 1


configs:
  haproxy:
    file: ./haproxy.cfg

services:

  haproxy:
    container_name: haproxy
    image: haproxy
    mem_limit: 8192m
    ports:
      - 3000:3000
      - 5432:5432
    privileged: true
    configs:
      - source: haproxy
        target: /usr/local/etc/haproxy/haproxy.cfg
    volumes:
      - ./standby-check.sh:/build-psql/standby-check.sh  # Mount the script
      - ./primary-check.sh:/build-psql/primary-check.sh  # Mount the script

  pg-0:
    container_name: pg-0
    <<: *service-common
    volumes:
      - pg_0_data:/bitnami/postgresql
    environment:
      <<: *common-env
      REPMGR_NODE_NAME: pg-0
      REPMGR_NODE_NETWORK_NAME: pg-0
      
  pg-1:
    container_name: pg-1    
    <<: *service-common
    volumes:
      - pg_1_data:/bitnami/postgresql
    environment:
      <<: *common-env
      REPMGR_NODE_NAME: pg-1
      REPMGR_NODE_NETWORK_NAME: pg-1


  redis-1:
    image: redis/redis-stack-server:latest
    ports:
      - 6379:6379
      - 13333:8001  # Redis Insight

  redis-2:
    image: redis/redis-stack-server:latest
    expose:
      - 6379
    
  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - type: bind
        source: prometheus/prometheus.yml
        target: /etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: unless-stopped
    ports:
      - '3000:3000'
    volumes:
      - grafana-storage:/var/lib/grafana

  gateway:
    build:
      context: ./gateway
    ports:
      - 5000:5000
    depends_on:
      service-registry:
        condition: service_started
       
    
  service-registry:
    build:
      context: ./service-registry
    ports:
      - 50051:50051
      - 8080:8080


  chat-1:
    build:
      context: .
      dockerfile: Dockerfile-chat
    secrets:
      - postgres-chat-password
    environment:
      - HOSTNAME=chat-1
      - SERVICE_NAME=chat
      - PORT=8008
      - QUART_APP=app:app
      - QUART_BODY_TIMEOUT=5
      - QUART_RESPONSE_TIMEOUT=5
      - POSTGRES_SERVER=postgres-chat
      - POSTGRES_USER=postgres
      - POSTGRES_DB=chat
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres-chat-password
      - CACHE_HOSTNAME_1=redis-1
      - CACHE_HOSTNAME_2=redis-2
    # command: quart run --port 8008 --host 0.0.0.0
    command: python3 -m hypercorn --keep-alive 3 app:app -b 0.0.0.0:8008 --access-logfile -
    ports:
      - 8008:8008  # http
      - 8090:8090  # prometheus
    depends_on:
      postgres-chat:
        condition: service_healthy
    develop:
      watch:
        - action: sync+restart
          path: ./chat
          target: /app
    restart: unless-stopped

  chat-2:
    build:
      context: .
      dockerfile: Dockerfile-chat
    secrets:
      - postgres-chat-password
    environment:
      - HOSTNAME=chat-2
      - SERVICE_NAME=chat
      - PORT=8008
      - QUART_APP=app:app
      - QUART_BODY_TIMEOUT=5
      - QUART_RESPONSE_TIMEOUT=5
      - POSTGRES_SERVER=postgres-chat
      - POSTGRES_USER=postgres
      - POSTGRES_DB=chat
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres-chat-password
      - CACHE_HOSTNAME_1=redis-1
      - CACHE_HOSTNAME_2=redis-2
    # command: quart run --port 8008 --host 0.0.0.0
    command: python3 -m hypercorn --keep-alive 3 app:app -b 0.0.0.0:8008 --access-logfile -
    ports:
      - 8009:8008
    depends_on:
      postgres-chat:
        condition: service_healthy
    develop:
      watch:
        - action: sync+restart
          path: ./chat
          target: /app


  postgres-chat:
    image: postgres
    restart: always
    user: postgres
    secrets:
      - postgres-chat-password
    volumes:
      - db-postgres-chat:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=chat
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres-chat-password
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 3s
      timeout: 5s
      retries: 5
    ports:
      - 5434:5432


  users-1:
    build:
      context: .
      dockerfile: Dockerfile-users
    ports:
      - 8010:8008
    secrets:
      - postgres-users-password
    environment:
      - HOSTNAME=users-1
      - SERVICE_NAME=users
      - PORT=8008
      - QUART_APP=app:app
      - QUART_BODY_TIMEOUT=5
      - QUART_RESPONSE_TIMEOUT=5
      - POSTGRES_SERVER=postgres-users
      - POSTGRES_USER=postgres
      - POSTGRES_DB=users
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres-users-password
    command: python3 -m hypercorn --keep-alive 3 app:app -b 0.0.0.0:8008 --access-logfile -
    depends_on:
      postgres-users:
        condition: service_healthy       
    develop:
      watch:
        - action: sync+restart
          path: ./users
          target: /app


  users-2:
    build:
      context: .
      dockerfile: Dockerfile-users
    ports:
      - 8011:8008
    secrets:
      - postgres-users-password
    environment:
      - HOSTNAME=users-2
      - SERVICE_NAME=users
      - PORT=8008
      - QUART_APP=app:app
      - QUART_BODY_TIMEOUT=5
      - QUART_RESPONSE_TIMEOUT=5
      - POSTGRES_SERVER=postgres-users
      - POSTGRES_USER=postgres
      - POSTGRES_DB=users
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres-users-password
    command: python3 -m hypercorn --keep-alive 3 app:app -b 0.0.0.0:8008 --access-logfile -
    depends_on:
      postgres-users:
        condition: service_healthy       
    develop:
      watch:
        - action: sync+restart
          path: ./users
          target: /app


  postgres-users:
    image: postgres
    restart: always
    user: postgres
    secrets:
      - postgres-users-password
    volumes:
      - db-postgres-users:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=users
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres-users-password
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 3s
      timeout: 5s
      retries: 5
    ports:
      - 5433:5432

      
volumes:
  db-postgres-users:
  db-postgres-chat:
  grafana-storage: {}
  pg_0_data:
  pg_1_data:

secrets:
  postgres-users-password:
    file: users/postgres-password.txt
  postgres-chat-password:
    file: chat/postgres-password.txt

